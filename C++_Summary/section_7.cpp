#include <iostream>
#include "clock.h" 
// 调用定义的类，提前声明了clock.h头文件和clock.cpp定义函数
// 类与结构体类似，都是自定义的数据类型

using namespace std;
///////////
// 类与对象
///////////

int clock::couts = 0;	// 静态数据成员在类外分配空间和初始化，static不用写

void main_7()
{
	// 直接创建实体
	clock myclock(2 ,4 ,5);
	myclock.SetTime(8, 12, 22);
	myclock.ShowTime();
	myclock.ShowTime(666);

	// 使用对象指针
	clock* pmyclock = new clock(4, 5, 6);
	pmyclock->SetTime(22, 12, 8);
	pmyclock->ShowTime();
	//delete pmyclock;

	// this指针
	// 在定义类的成员函数时，其实隐藏默认传入了该类的this指针，用于成员函数调用成员变量
	// this->Hour = newH;


	//////////////////////////////////////////////////////////////////////////
	// C++程序中的对象初始化和清理工作分别由两个特殊的成员函数来完成，构造函数 和 析构函数
	
	clock::printC(); // 用clock类的静态成员函数访问静态成员变量。

	//////////////////////////////////////////////////////////////////////////
	// 类成员的保护和使用
	
	// 类的封装，两个含义：1、包装，把对象的全部属性和操作结合在一起  2、信息隐藏，尽可能对外隐藏细节，只对外公布有限界面

	// 友元：访问类的私有成员和保护成员的外部成员。
	// 友元函数是在类声明中由关键字 friend 修饰的非成员函数，类似于一个接口。
	// friend 返回值类型 函数名();	// 友元函数的声明，main函数中直接调用这个函数就可以了。
	Youyuan(myclock);
	// 如果B类中声明了A类的友元函数，则B类是A类的友元类，那么B类的成员函数可以调用A类的 私有和保护成员变量。

	// 常对象和常成员：即需要共享、又需要防止改变的数据应该声明为 const常量 进行保护。


	//////////////////////////////////////////////////////////////////////////
	// 运算符重载（运算符重载的实质就是函数重载，如+、-、=、>>等，有些字符是不能重载的）
	
	// 函数类型 operator 运算符(形参表){ 函数体; }

	//////////////////////////////////////////////////////////////////////////
	// 类的组合




}