#include <iostream>

using namespace std;
///////////
// 函数
///////////
// 构成：1）接口	2）函数体
// 接口：函数名，函数类型，形式参数表
// 理论上函数定义是应该在主函数前面的；但也可以现在main之前声明，之后再定义。

int test_char(char betest_1, char betest_2);	// 先声明

////////// 递归函数 \\\\\\\\\\\ 
// 查阅Evernote中的C++文件夹

///////// 内联函数 \\\\\\\\\\\\
// 只是把主函数的一段代码拿出来写在内联函数内部，便于阅读，减少时间空间开销
// 1）不能包含循环语句、switch语句	2）不能先声明，再调用
inline int max(int x, int y, int z)
{
	return ((x > y) ? (x >= z ? x : z) : (y >= z ? y : z));
}

///////// 重载函数 \\\\\\\\\\\\
// 重载：只是因为函数同名
// 形式参数的个数、类型或顺序彼此不同


///////// 默认参数值函数 \\\\\\\\\\
// 形式参数可能已经赋了初始值。调用时如果没有赋值就按照初始值进行计算
// 注：具有默认参数值的参数要在参数表的最右边！


///////// 局部变量和全局变量 \\\\\\\\\\
// 全局变量能够被位于其定义位置之后的所有函数共用，默认初始值为0
// 标识符的作用域：
// 1)块作用域（例如一个在if选择语句块中定义的变量只能在内部使用） 2）函数作用域 3）类作用域 4）文件作用域（全局变量）
// 当内层标识符与外层标识符同名时，内层标识符可见，外层标识符不可见。


//////////////////////////////////////////////////////////////////////////
// 变量的存储类型
// 1、auto型变量，auto int a = 0; 只是有时候会省略
// 2、register型变量，register int counter，变量counter存储在CPU的寄存器中，访问速度快
// 3、extern型变量，在另一个文件中用该方式进行声明，就可以用这些变凉了
// 4、static，静态变量，在程序运行期间一直在静态存储区占有固定的存储空间。
//	  1)静态局部变量具有局部作用域只对定义自己的函数可见，只被初始化一次，自从初始化一次之后直到程序运行期间一直都在。
//	  2)静态全局变量具有全局作用域作用于定义它的程序文件但是不能作用于项目里的其它文件，这一点和全局变量不同。静态全局变量可以被多次初始化。

void main_5()
{


}

int test_char(char betest_1, char betest_2)		// 后定义
{
	cin >> betest_1;
	cin >> betest_2;
	if (betest_1 == betest_2)
		return 1;
	else return 0;
}